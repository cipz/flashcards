{
  "title": "Junior CSS Developer Interview Questions",
  "sources": [
    "https://developer.mozilla.org/en-US/docs/Web/CSS",
    "https://css-tricks.com/"
  ],
  "cards": [
    {
      "question": "What is CSS and what is it used for?",
      "answer": "CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG or XHTML). CSS describes how elements should be rendered on screen, on paper, in speech, or on other media.",
      "hint": "CSS is about style and presentation.",
      "notes": "CSS helps in separating content (HTML) from presentation (styling) to improve content accessibility and provide more flexibility and control in the specification of presentation characteristics.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/CSS",
        "https://css-tricks.com/guides/beginner/"
      ]
    },
    {
      "question": "Can you explain the box model in CSS?",
      "answer": "In CSS, the box model is a box that wraps around every HTML element. It consists of four parts: the content, padding, border, and margin. The content is the area where text and images appear, padding clears an area around the content, the border surrounds the padding and content, and the margin is the outermost layer that clears an area around the border.",
      "hint": "It involves margins, borders, padding, and the actual content.",
      "notes": "Understanding the box model is crucial for designing layouts in CSS as it affects the dimensions and spacing of your elements.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model",
        "https://css-tricks.com/the-css-box-model/"
      ]
    },
    {
      "question": "What are flexbox and its advantages?",
      "answer": "Flexbox is a one-dimensional layout method for laying out items in rows or columns. Items expand to fill additional space and shrink to fit into smaller spaces. This model provides easier and more flexible layout options in CSS. Advantages of flexbox include simple alignment of elements (both vertically and horizontally), efficient space distribution between items in an interface, and scalable UI design on different screen sizes.",
      "hint": "Think of a flexible box that puts its children in line.",
      "notes": "Flexbox makes it easy to design complex layouts without using floats and positioning.",
      "references": [
        "https://css-tricks.com/snippets/css/a-guide-to-flexbox/",
        "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox"
      ]
    },
    {
      "question": "Describe the difference between responsive and adaptive design.",
      "answer": "Responsive design fluidly changes depending on the screen size using CSS media queries to adapt to the viewer's device. It’s built on a fluid grid and can handle any screen size or device. Adaptive design uses static layouts based on breakpoints which don’t respond once they’re initially loaded. Adaptive designs are developed for specific device sizes.",
      "hint": "Responsive design is fluid and adapts in real-time, while adaptive design uses fixed layout sizes.",
      "notes": "Responsive design is generally preferred for modern web applications as it provides greater flexibility and a better user experience.",
      "references": [
        "https://css-tricks.com/the-difference-between-responsive-and-adaptive-design/",
        "https://developer.mozilla.org/en-US/docs/Web/Development/Responsive_web_design"
      ]
    },
    {
      "question": "What is the purpose of CSS preprocessors?",
      "answer": "CSS preprocessors are scripting languages that extend the default capabilities of CSS. They allow developers to write code in the preprocessor's language, which then compiles into CSS. Examples include SASS, LESS, and Stylus. They offer features like variables, nested rules, mixins, and more, which help in writing reusable, maintainable, and scalable CSS.",
      "hint": "Preprocessors add programming capabilities to CSS.",
      "notes": "Using a preprocessor can significantly speed up CSS coding and make it more efficient.",
      "references": ["https://sass-lang.com/guide", "https://lesscss.org/"]
    },
    {
      "question": "How can you create a grid layout in CSS?",
      "answer": "CSS Grid Layout is a two-dimensional layout system for the web. It lets you layout items into rows and columns, and it offers significant control over the sizing and spacing of grid items. Use the `display: grid;` or `display: inline-grid;` properties to define a container as a grid container and set up rows and columns using `grid-template-rows`, `grid-template-columns`, and `grid-gap` properties.",
      "hint": "Use `display: grid;` and define columns and rows.",
      "notes": "Grid is powerful for creating complex layouts that are difficult to achieve with other CSS layout models.",
      "references": [
        "https://css-tricks.com/snippets/css/complete-guide-grid/",
        "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"
      ]
    },
    {
      "question": "Explain absolute and relative positioning.",
      "answer": "Absolute positioning places an element exactly where you tell it to on the page relative to its closest positioned ancestor (excluding static elements). Relative positioning moves an element relative to its current position, without changing the layout around it.",
      "hint": "Absolute positioning is relative to the nearest positioned ancestor, not necessarily the parent.",
      "notes": "Use relative positioning to nudge elements from where they would normally be. Use absolute to place any element exactly where you want it.",
      "references": [
        "https://css-tricks.com/almanac/properties/p/position/",
        "https://developer.mozilla.org/en-US/docs/Web/CSS/position"
      ]
    },
    {
      "question": "What are pseudo-classes in CSS?",
      "answer": "A pseudo-class is used to define a special state of an element. For example, it can be used to style an element when a user mouses over it, focuses on it, or checks it. Common examples are `:hover`, `:focus`, and `:active`.",
      "hint": "Pseudo-classes represent states of an element.",
      "notes": "Pseudo-classes can be used to add special effects to elements based on user interaction.",
      "references": [
        "https://css-tricks.com/pseudo-class-selectors/",
        "https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"
      ]
    },
    {
      "question": "What does 'z-index' do in CSS?",
      "answer": "The 'z-index' property in CSS controls the vertical stacking order of elements that overlap. An element with a higher z-index generally covers an element with a lower one. It only works on positioned elements (position: absolute, position: relative, position: fixed, or position: sticky).",
      "hint": "Z-index manages the stack order of elements that overlap.",
      "notes": "It's useful in complex layouts where elements overlap and precise control over their stacking is necessary.",
      "references": [
        "https://css-tricks.com/almanac/properties/z/z-index/",
        "https://developer.mozilla.org/en-US/docs/Web/CSS/z-index"
      ]
    }
  ]
}
