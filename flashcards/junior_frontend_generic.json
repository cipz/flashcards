{
  "title": "Junior Front-End Developer Interview Questions",
  "sources": ["https://developer.mozilla.org", "https://w3schools.com"],
  "cards": [
    {
      "question": "What is the purpose of HTML?",
      "answer": "HTML (HyperText Markup Language) is the standard markup language used to create web pages. It provides the basic structure of sites, which is enhanced and modified by other technologies like CSS and JavaScript.",
      "hint": "Think of the skeleton of a web page.",
      "notes": "HTML elements are the building blocks of HTML pages.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/HTML",
        "https://w3schools.com/html/"
      ]
    },
    {
      "question": "Can you explain the box model in CSS?",
      "answer": "In CSS, the box model is a fundamental concept used to define the design and layout. It includes the content, padding, border, and margin of an element.",
      "hint": "It's a box wrapping each HTML element.",
      "notes": "Understanding the box model is crucial for laying out elements correctly.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model",
        "https://w3schools.com/css/css_boxmodel.asp"
      ]
    },
    {
      "question": "What are some differences between IDs and classes in CSS?",
      "answer": "IDs are unique identifiers that can be assigned to only one element per page, while classes can be used on multiple elements. IDs have higher specificity than classes, which means styles applied with an ID override those applied with a class.",
      "hint": "Consider specificity and multiplicity.",
      "notes": "Use IDs for single, unique elements and classes for groups of elements.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors",
        "https://w3schools.com/css/css_id_class.asp"
      ]
    },
    {
      "question": "What is the Document Object Model (DOM)?",
      "answer": "The DOM is a programming interface for HTML and XML documents. It represents the page so that programs can change the document structure, style, and content. The DOM represents the document as nodes and objects; that way, programming languages can interact with the page.",
      "hint": "It's a tree-like structure that represents the page in a structured way.",
      "notes": "The DOM can be manipulated using JavaScript.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction",
        "https://w3schools.com/js/js_htmldom.asp"
      ]
    },
    {
      "question": "How can CSS be integrated into a web page?",
      "answer": "CSS can be integrated in three ways: Inline - by using the style attribute inside HTML elements; Internal - by using a <style> element in the <head> section; External - by linking to an external CSS file through the <link> element.",
      "hint": "There are three methods: Inline, Internal, and External.",
      "notes": "Each method has its use case depending on the project's needs.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/CSS",
        "https://w3schools.com/css/css_howto.asp"
      ]
    },
    {
      "question": "Can you explain how 'this' keyword works in JavaScript?",
      "answer": "The 'this' keyword in JavaScript refers to the object it belongs to. It has different values depending on where it is used: In a method, 'this' refers to the owner object and in a function, 'this' refers to the global object.",
      "hint": "Its value varies with the context.",
      "notes": "'This' can be confusing in events and functions called as methods.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this",
        "https://w3schools.com/js/js_this.asp"
      ]
    },
    {
      "question": "What are promises in JavaScript?",
      "answer": "Promises are used to handle asynchronous operations. They are used to handle deferred and asynchronous computations. A promise represents an operation that hasn't completed yet, but is expected in the future.",
      "hint": "Think about a placeholder for a future result.",
      "notes": "Promises can be in one of these states: fulfilled, rejected, or pending.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
        "https://w3schools.com/js/js_promise.asp"
      ]
    },
    {
      "question": "Explain how you would retrieve a user's geographic location in a web application.",
      "answer": "To retrieve a user's geographic location, the Geolocation API can be used, which is part of the Navigator object in HTML5. This API allows the device to provide your application with precise location data, given the user's consent.",
      "hint": "Look into HTML5 APIs.",
      "notes": "The API's getCurrentPosition() method is commonly used to get the current position.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/geolocation",
        "https://w3schools.com/html/html5_geolocation.asp"
      ]
    },
    {
      "question": "What is 'prop drilling' and how can you avoid it in React?",
      "answer": "Prop drilling refers to the process of passing data from a higher-level component through various layers of intermediate components to reach a deeply nested component. It can be cumbersome and make the components tightly coupled.",
      "hint": "Consider using context or state management libraries to avoid it.",
      "notes": "Using React's Context API or libraries like Redux can help manage state more efficiently without prop drilling.",
      "references": [
        "https://reactjs.org/docs/context.html",
        "https://redux.js.org/"
      ]
    },
    {
      "question": "Describe the difference between 'state' and 'props' in React.",
      "answer": "In React, 'props' (short for 'properties') are a way of passing data from parent to child components, whereas 'state' is a local data storage that is local to the component only and cannot be passed to children components directly.",
      "hint": "Props are immutable, state is mutable.",
      "notes": "State is used for variables that determine the rendering of components and can change, while props are used to communicate between components.",
      "references": [
        "https://reactjs.org/docs/faq-state.html",
        "https://reactjs.org/docs/components-and-props.html"
      ]
    },
    {
      "question": "How does event handling work in React?",
      "answer": "In React, events are handled using camelCase syntax as attributes passed to components (e.g., onClick, onChange). These event handlers are a part of React's synthetic event system which wraps the browser's native events.",
      "hint": "React's event system is synthetic.",
      "notes": "It's important to bind 'this' in the event handlers to use 'this' correctly within the callback.",
      "references": [
        "https://reactjs.org/docs/handling-events.html",
        "https://w3schools.com/react/react_events.asp"
      ]
    }
  ]
}
