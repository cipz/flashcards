{
  "title": "Junior JavaScript Developer Interview Questions",
  "sources": [
    "https://developer.mozilla.org/en-US/docs/Web/JavaScript",
    "https://javascript.info/"
  ],
  "cards": [
    {
      "question": "What are the different data types present in JavaScript?",
      "answer": "JavaScript provides eight basic data types: undefined, null, boolean, string, symbol, bigint, number, and object. These types can be divided into two categories: primitive (undefined, null, boolean, string, symbol, bigint, number) and reference types (objects).",
      "hint": "There are both primitive and reference types.",
      "notes": "Understanding these types is crucial for managing JavaScript's dynamic typing.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures",
        "https://javascript.info/types"
      ]
    },
    {
      "question": "Explain the concept of hoisting in JavaScript.",
      "answer": "Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their containing scope during the compilation phase. This behavior means that it's possible to use variables and functions before they are declared in the code.",
      "hint": "Variables and functions are accessible before their formal declaration in the code.",
      "notes": "Only declarations are hoisted, not initializations. If a variable is declared and initialized after using it, the value will be undefined.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Glossary/Hoisting",
        "https://javascript.info/variables"
      ]
    },
    {
      "question": "What is 'closure' in JavaScript?",
      "answer": "A closure is a feature in JavaScript where an inner function has access to the outer (enclosing) function’s variables—a scope chain. Closures are used for implementing privacy and data hiding, and to create function factories.",
      "hint": "Closure gives access to an outer function’s scope from an inner function.",
      "notes": "Understanding closures is powerful for functional programming and privacy in coding.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures",
        "https://javascript.info/closure"
      ]
    },
    {
      "question": "What are template literals in JavaScript?",
      "answer": "Template literals are string literals allowing embedded expressions. You can use multi-line strings and string interpolation features with them. They are enclosed by the backtick (` `) character instead of double or single quotes.",
      "hint": "Useful for embedding expressions within strings.",
      "notes": "Template literals provide an easy way to interpolate variables and expressions into strings.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals",
        "https://javascript.info/string#template-literals"
      ]
    },
    {
      "question": "Can you describe the difference between '==' and '===' operators?",
      "answer": "`==` is the loose equality operator and will convert the operands to the same type before making the comparison. On the other hand, `===` is the strict equality operator and does not perform a type conversion, meaning if the types differ, false is returned.",
      "hint": "Consider type conversion and comparison.",
      "notes": "Using `===` can prevent unexpected type coercion.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness",
        "https://javascript.info/comparison"
      ]
    },
    {
      "question": "Explain 'this' keyword in JavaScript.",
      "answer": "The `this` keyword refers to the object that the function is a property of. It provides a way to reference the object that is currently executing or invoking the function, which can be global, from an object, or within a class constructor.",
      "hint": "The value of `this` is context-dependent.",
      "notes": "`this` behavior is dynamic and can be affected by different invocation patterns: method call, function call, constructor call, and indirect call.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this",
        "https://javascript.info/object-methods#method-this"
      ]
    },
    {
      "question": "What is event bubbling and event capturing?",
      "answer": "Event bubbling and event capturing are two ways of event propagation in the HTML DOM API, when an event occurs in an element inside another element, and both elements have registered a handle for that event. In bubbling, the event is first captured and handled by the innermost element and then propagated to outer elements. In capturing, the event is first captured by the outermost element and propagated to the inner elements.",
      "hint": "Events in the DOM tree propagate in two phases: capturing down the tree, bubbling up.",
      "notes": "By default, events are set to bubble in JavaScript unless explicitly set to use capturing.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles",
        "https://javascript.info/bubbling-and-capturing"
      ]
    },
    {
      "question": "What is the use of the Array 'map' function?",
      "answer": "The `map` function creates a new array populated with the results of calling a provided function on every element in the calling array. It is commonly used for transforming data in an array, such as multiplying all elements by a factor, without modifying the original array.",
      "hint": "Transforms the elements of an array using a function.",
      "notes": "`map` is part of the array's prototype and is useful for creating new arrays that result from applying a function on every element of the input array.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",
        "https://javascript.info/array-methods#map-and-sort"
      ]
    },
    {
      "question": "How can JavaScript handle asynchronous operations? Mention any methods or syntaxes used.",
      "answer": "JavaScript can handle asynchronous operations using callbacks, promises, and async/await syntax. Callbacks are the fundamental method where a function is passed to another function. Promises provide a more manageable solution for handling asynchronous operations. Async/await is built on promises and allows a more synchronous style of coding.",
      "hint": "There are multiple ways including Promises and Async/Await.",
      "notes": "Understanding asynchronous JavaScript is crucial for dealing with operations like API calls, file operations, etc.",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous",
        "https://javascript.info/async"
      ]
    }
  ]
}
